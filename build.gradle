import com.android.builder.DefaultManifestParser

buildscript {
    repositories {
        mavenCentral()
		maven { url 'http://repo1.maven.org/maven2' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.7.+'
    }
}

apply plugin: 'android'

    repositories {
        mavenCentral()
    }

dependencies {
	compile 'com.squareup.dagger:dagger:1.2.0'
	compile 'com.squareup.dagger:dagger-compiler:1.2.0'
	compile 'com.jakewharton:butterknife:4.0.1'
	compile 'com.squareup:javawriter:2.4.0'
	compile 'com.android.support:support-v4:18.0.+'
}


android {
	// fix dagger_butterknife jars dupulication error
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

	// disable lint error
	lintOptions {
		abortOnError false
	}

	// signing
	signingConfigs {
  		release {
	    }
	}

	buildTypes {
        release {
            signingConfig signingConfigs.release
			runProguard false
        }
		debug {
			packageNameSuffix '.debug'
		}
    }

 	if (project.hasProperty('key_alias')
			&& project.hasProperty('key_alias_password')
			&& project.hasProperty('key_store')
			&& project.hasProperty('key_store_password')) {
    	android.signingConfigs.release.keyAlias = key_alias
		android.signingConfigs.release.keyPassword = key_alias_password
		android.signingConfigs.release.storeFile = file(key_store)
		android.signingConfigs.release.storePassword = key_store_password
	} else {
		buildTypes.release.signingConfig = null
	}
    
    compileSdkVersion 17
    buildToolsVersion "17"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 17
    }

	android.applicationVariants.all { variant ->
		def manifestParser = new DefaultManifestParser()
		def ver = manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile)

		apk = variant.packageApplication.outputFile;

		newName = apk.name.replace(".apk", "-v" + ver + ".apk");
//		newName = newName.replace("-" + variant.buildType.name, "");

		variant.packageApplication.outputFile = new File(apk.parentFile, newName);
		if (variant.zipAlign) {
			variant.zipAlign.outputFile = new File(apk.parentFile, newName.replace("-unaligned", ""));
		}
	}

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        instrumentTest.setRoot('tests')
    }
}