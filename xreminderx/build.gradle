import com.android.builder.DefaultManifestParser

buildscript {
    repositories {
        mavenCentral()
		maven { url 'http://repo1.maven.org/maven2' }
    }
    dependencies {		
        classpath 'com.android.tools.build:gradle:0.7.+'
    }
}

apply plugin: 'android'

repositories {
	mavenCentral()
}

dependencies {
	compile 'com.google.android.gms:play-services:4.3.23'
	compile 'com.squareup.dagger:dagger:1.2.0'
	compile 'com.squareup.dagger:dagger-compiler:1.2.0'
	compile 'com.jakewharton:butterknife:4.0.1'
	compile 'com.squareup:javawriter:2.4.0'
	compile 'com.android.support:support-v4:19.1.+'
	// compile 'com.parse:parse:1.5.0+'
	compile files('libs/Parse-1.5.0.jar')
	// compile project(':libraries:xreminderx.theming')
	compile project(':libraries:floatlabel')
}

android {
	/* fix dagger_butterknife jars dupulication error */
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

	buildTypes {
		debug {
			packageNameSuffix ".debug"			
		}
	}


	/* disable lint error */
	lintOptions {
		abortOnError false
	}

	/* signing */
	signingConfigs {
  		release {
	    }
	}

	if(project.hasProperty("debugSigningPropertiesPath") && project.hasProperty("releaseSigningPropertiesPath")) {
        File debugPropsFile = new File(System.getenv('HOME') +  "/" + project.property("debugSigningPropertiesPath"))
        File releasePropsFile = new File(System.getenv('HOME') +  "/" + project.property("releaseSigningPropertiesPath"))

        if(debugPropsFile.exists() && releasePropsFile.exists()) {
            Properties debugProps = new Properties()
            debugProps.load(new FileInputStream(debugPropsFile))

            Properties releaseProps = new Properties()
            releaseProps.load(new FileInputStream(releasePropsFile))

            signingConfigs {
                debug {
                    storeFile file(debugPropsFile.getParent() + "/" + debugProps['keystore'])
                    storePassword debugProps['keystore.password']
                    keyAlias debugProps['keyAlias']
                    keyPassword debugProps['keyPassword']
                }
                release {
                    storeFile file(releasePropsFile.getParent() + "/" + releaseProps['keystore'])
                    storePassword releaseProps['keystore.password']
                    keyAlias releaseProps['keyAlias']
                    keyPassword releaseProps['keyPassword']
                }
            }

            buildTypes {
                debug {
                    signingConfig signingConfigs.debug
                }
                release {
                    signingConfig signingConfigs.release
                }
            }
        }
    }
    
    compileSdkVersion 19
    buildToolsVersion "17"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 19

		// testing
		testPackageName "com.ch3d.xreminderx.tests"
		testInstrumentationRunner "android.test.InstrumentationTestRunner"
		// testHandlingProfiling true
		// testFunctionalTest true
    }

	testOptions {
        resultsDir = "$project.buildDir/tests/results"
    }

	android.applicationVariants.all { variant ->
		def manifestParser = new DefaultManifestParser()
		def ver = manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile)

		apk = variant.packageApplication.outputFile;

		newName = apk.name.replace(".apk", "-v" + ver + ".apk");

		variant.packageApplication.outputFile = new File(apk.parentFile, newName);
		if (variant.zipAlign) {
			variant.zipAlign.outputFile = new File(apk.parentFile, newName.replace("-unaligned", ""));
		}
	}

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        instrumentTest.setRoot('tests')
    }
}